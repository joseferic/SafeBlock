package com.example.safeblock;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class NewSafeBlock_sol_NewSafeBlock extends Contract {
    public static final String BINARY = "608060405260006008553480156200001657600080fd5b50600080546001600160a01b0319163317905560408051808201909152600a808252694a6f736566204572696360b01b60209092019182526200005c91600191620000aa565b5060408051808201909152601b8082527f5361796120446576656c6f7065722050617373776f72642031323300000000006020909201918252620000a391600291620000aa565b506200018c565b828054620000b89062000150565b90600052602060002090601f016020900481019282620000dc576000855562000127565b82601f10620000f757805160ff191683800117855562000127565b8280016001018555821562000127579182015b82811115620001275782518255916020019190600101906200010a565b506200013592915062000139565b5090565b5b808211156200013557600081556001016200013a565b600181811c908216806200016557607f821691505b6020821081036200018657634e487b7160e01b600052602260045260246000fd5b50919050565b611c7c806200019c6000396000f3fe608060405234801561001057600080fd5b50600436106100ff5760003560e01c8063ab87086011610097578063f0ba844011610066578063f0ba844014610206578063f894d4371461022a578063f8b39e8b1461023d578063fe8ca2871461025057600080fd5b8063ab870860146101b6578063cefaa235146101c9578063d9d237dc146101dc578063e9dda84d146101fd57600080fd5b80636f9d10c6116100d35780636f9d10c6146101685780637f5e9d8d1461018857806384ecc46f1461019b578063a80ed5b4146101ae57600080fd5b806281db981461010457806338cc48311461012c5780636419e32f146101415780636b5c03d314610153575b600080fd5b61011761011236600461157e565b610263565b60405190151581526020015b60405180910390f35b610134610365565b60405161012391906115ff565b6006545b604051908152602001610123565b61016661016136600461164c565b6103c7565b005b61017b6101763660046116b8565b610496565b604051610123919061172b565b6101666101963660046117e1565b610542565b6101666101a936600461182f565b6107a8565b600754610145565b6101666101c4366004611886565b610851565b6101176101d7366004611920565b610a39565b6101ef6101ea366004611994565b610b13565b6040516101239291906119c9565b61014560085481565b6102196102143660046119ed565b610b46565b604051610123959493929190611a06565b6101176102383660046117e1565b610daf565b61011761024b366004611a68565b610e30565b61016661025e36600461157e565b610ec2565b6001600160a01b03851660009081526005602052604081205460ff1680156102ed57508484604051602001610299929190611abb565b60408051601f1981840301815282825280516020918201206001600160a01b038a166000908152600383529290922091926102d5929101611b05565b60405160208183030381529060405280519060200120145b801561035b57508282604051602001610307929190611abb565b60408051601f1981840301815282825280516020918201206001600160a01b038a16600090815260048352929092209192610343929101611b05565b60405160208183030381529060405280519060200120145b9695505050505050565b606060068054806020026020016040519081016040528092919081815260200182805480156103bd57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161039f575b5050505050905090565b60005b60085481101561048f5782826040516020016103e7929190611abb565b604051602081830303815290604052805190602001206007828154811061041057610410611ba0565b90600052602060002090600502016001016040516020016104319190611b05565b604051602081830303815290604052805190602001200361047d5784846007838154811061046157610461611ba0565b6000918252602090912061047b9360059092020191611377565b505b8061048781611bcc565b9150506103ca565b5050505050565b6001600160a01b03811660009081526003602052604090208054606091906104bd90611acb565b80601f01602080910402602001604051908101604052809291908181526020018280546104e990611acb565b80156105365780601f1061050b57610100808354040283529160200191610536565b820191906000526020600020905b81548152906001019060200180831161051957829003601f168201915b50505050509050919050565b6000546001600160a01b031633146105af5760405162461bcd60e51b815260206004820152602560248201527f52657175657374204469746f6c616b3a204d73672e73656e64657220213d206f60448201526403bb732b9160dd1b60648201526084015b60405180910390fd5b806040516020016105c09190611be5565b60408051601f1981840301815282825280516020918201206001600160a01b0386166000908152600383529290922091926105fc929101611b05565b604051602081830303815290604052805190602001201461065f5760405162461bcd60e51b815260206004820152601b60248201527f416464726573732026204e616d6120546964616b20536573756169000000000060448201526064016105a6565b600060068054806020026020016040519081016040528092919081815260200182805480156106b757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610699575b50506006549394506000939250839150505b8181101561078a57856001600160a01b03168482815181106106ed576106ed611ba0565b60200260200101516001600160a01b031614801561076b5750846040516020016107179190611be5565b60408051601f1981840301815282825280516020918201206001600160a01b038a16600090815260038352929092209192610753929101611b05565b60405160208183030381529060405280519060200120145b156107785780925061078a565b8061078281611bcc565b9150506106c9565b50825161079e9060069060208601906113fb565b5061048f8261108c565b3360009081526005602052604090205460ff1661081c5760405162461bcd60e51b815260206004820152602c60248201527f526571756573742055706461746520537461747573204469746f6c616b203a2060448201526b213ab5b0b71026b2b6b132b960a11b60648201526084016105a6565b8060098360405161082d9190611be5565b908152604051908190036020019020805491151560ff199092169190911790555050565b600060098383604051610865929190611abb565b9081526040805191829003602090810183205460c084018352600060a0850190815284528251601f8b0183900483028101830190935289835260ff16935060079291828201918b908b9081908401838280828437600092019190915250505090825250604080516020601f8a0181900481028201810190925288815291810191908990899081908401838280828437600092019190915250505090825250604080516020601f880181900481028201810190925286815291810191908790879081908401838280828437600092018290525093855250505084151560209283015283546001810185559381528190208251805193946005029091019261096e9284920190611450565b5060208281015180516109879260018501920190611450565b50604082015180516109a3916002840191602090910190611450565b50606082015180516109bf916003840191602090910190611450565b50608091909101516004909101805460ff1916911515919091179055604080516020601f8501819004810282018101909252838152610a1891859085908190840183828082843760009201919091525061118092505050565b600160086000828254610a2b9190611c01565b909155505050505050505050565b600080546001600160a01b038581169116148015610aa3575082604051602001610a639190611be5565b604051602081830303815290604052805190602001206001604051602001610a8b9190611b05565b60405160208183030381529060405280519060200120145b8015610afb575081604051602001610abb9190611be5565b604051602081830303815290604052805190602001206002604051602001610ae39190611b05565b60405160208183030381529060405280519060200120145b15610b0857506001610b0c565b5060005b9392505050565b6060600082600984604051610b289190611be5565b90815260405190819003602001902054909460ff9091169350915050565b60078181548110610b5657600080fd5b9060005260206000209060050201600091509050806000018054610b7990611acb565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba590611acb565b8015610bf25780601f10610bc757610100808354040283529160200191610bf2565b820191906000526020600020905b815481529060010190602001808311610bd557829003601f168201915b505050505090806001018054610c0790611acb565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3390611acb565b8015610c805780601f10610c5557610100808354040283529160200191610c80565b820191906000526020600020905b815481529060010190602001808311610c6357829003601f168201915b505050505090806002018054610c9590611acb565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc190611acb565b8015610d0e5780601f10610ce357610100808354040283529160200191610d0e565b820191906000526020600020905b815481529060010190602001808311610cf157829003601f168201915b505050505090806003018054610d2390611acb565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4f90611acb565b8015610d9c5780601f10610d7157610100808354040283529160200191610d9c565b820191906000526020600020905b815481529060010190602001808311610d7f57829003601f168201915b5050506004909301549192505060ff1685565b600080546001600160a01b038481169116148015610e19575081604051602001610dd99190611be5565b604051602081830303815290604052805190602001206001604051602001610e019190611b05565b60405160208183030381529060405280519060200120145b15610e2657506001610e2a565b5060005b92915050565b6001600160a01b03831660009081526005602052604081205460ff168015610eba57508282604051602001610e66929190611abb565b60408051601f1981840301815282825280516020918201206001600160a01b038816600090815260038352929092209192610ea2929101611b05565b60405160208183030381529060405280519060200120145b949350505050565b6000546001600160a01b03163314610f2e5760405162461bcd60e51b815260206004820152602960248201527f52657175657374204469746f6c616b3a204d73672e73656e64657220213d2064604482015268032bb32b637b832b9160bd1b60648201526084016105a6565b6040805160008082526020808301808552835190206001600160a01b038a1683526003909152908390209092610f649201611b05565b6040516020818303038152906040528051906020012014610fd85760405162461bcd60e51b815260206004820152602860248201527f52657175657374204469746f6c616b3a20416464726573732054656c6168205460448201526732b93230b33a30b960c11b60648201526084016105a6565b6001600160a01b0385166000908152600360205260409020610ffb908585611377565b506001600160a01b0385166000908152600560209081526040808320805460ff1916600117905560049091529020611034908383611377565b5050600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b039590951694909417909355505050565b60068054821061109a575050565b815b81546110aa90600190611c19565b81101561113857816110bd826001611c01565b815481106110cd576110cd611ba0565b9060005260206000200160009054906101000a90046001600160a01b03168282815481106110fd576110fd611ba0565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790558061113081611bcc565b91505061109c565b508080548061114957611149611c30565b600082815260209020810160001990810180546001600160a01b0319169055019055805461117b9060069083906114c4565b505050565b6000600a805480602002602001604051908101604052809291908181526020016000905b828210156112505783829060005260206000200180546111c390611acb565b80601f01602080910402602001604051908101604052809291908181526020018280546111ef90611acb565b801561123c5780601f106112115761010080835404028352916020019161123c565b820191906000526020600020905b81548152906001019060200180831161121f57829003601f168201915b5050505050815260200190600101906111a4565b5050505090506000815190506000805b828110156112ef57846040516020016112799190611be5565b604051602081830303815290604052805190602001208482815181106112a1576112a1611ba0565b60200260200101516040516020016112b99190611be5565b60405160208183030381529060405280519060200120036112dd57600191506112ef565b806112e781611bcc565b915050611260565b5080151560010361137157600a8054600181018255600091909152845161133d917fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801906020870190611450565b5060006009856040516113509190611be5565b908152604051908190036020019020805491151560ff199092169190911790555b50505050565b82805461138390611acb565b90600052602060002090601f0160209004810192826113a557600085556113eb565b82601f106113be5782800160ff198235161785556113eb565b828001600101855582156113eb579182015b828111156113eb5782358255916020019190600101906113d0565b506113f7929150611504565b5090565b8280548282559060005260206000209081019282156113eb579160200282015b828111156113eb57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061141b565b82805461145c90611acb565b90600052602060002090601f01602090048101928261147e57600085556113eb565b82601f1061149757805160ff19168380011785556113eb565b828001600101855582156113eb579182015b828111156113eb5782518255916020019190600101906114a9565b8280548282559060005260206000209081019282156113eb5760005260206000209182015b828111156113eb5782548255916001019190600101906114e9565b5b808211156113f75760008155600101611505565b80356001600160a01b038116811461153057600080fd5b919050565b60008083601f84011261154757600080fd5b50813567ffffffffffffffff81111561155f57600080fd5b60208301915083602082850101111561157757600080fd5b9250929050565b60008060008060006060868803121561159657600080fd5b61159f86611519565b9450602086013567ffffffffffffffff808211156115bc57600080fd5b6115c889838a01611535565b909650945060408801359150808211156115e157600080fd5b506115ee88828901611535565b969995985093965092949392505050565b6020808252825182820181905260009190848201906040850190845b818110156116405783516001600160a01b03168352928401929184019160010161161b565b50909695505050505050565b6000806000806040858703121561166257600080fd5b843567ffffffffffffffff8082111561167a57600080fd5b61168688838901611535565b9096509450602087013591508082111561169f57600080fd5b506116ac87828801611535565b95989497509550505050565b6000602082840312156116ca57600080fd5b610b0c82611519565b60005b838110156116ee5781810151838201526020016116d6565b838111156113715750506000910152565b600081518084526117178160208601602086016116d3565b601f01601f19169290920160200192915050565b602081526000610b0c60208301846116ff565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261176557600080fd5b813567ffffffffffffffff808211156117805761178061173e565b604051601f8301601f19908116603f011681019082821181831017156117a8576117a861173e565b816040528381528660208588010111156117c157600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156117f457600080fd5b6117fd83611519565b9150602083013567ffffffffffffffff81111561181957600080fd5b61182585828601611754565b9150509250929050565b6000806040838503121561184257600080fd5b823567ffffffffffffffff81111561185957600080fd5b61186585828601611754565b9250506020830135801515811461187b57600080fd5b809150509250929050565b6000806000806000806060878903121561189f57600080fd5b863567ffffffffffffffff808211156118b757600080fd5b6118c38a838b01611535565b909850965060208901359150808211156118dc57600080fd5b6118e88a838b01611535565b9096509450604089013591508082111561190157600080fd5b5061190e89828a01611535565b979a9699509497509295939492505050565b60008060006060848603121561193557600080fd5b61193e84611519565b9250602084013567ffffffffffffffff8082111561195b57600080fd5b61196787838801611754565b9350604086013591508082111561197d57600080fd5b5061198a86828701611754565b9150509250925092565b6000602082840312156119a657600080fd5b813567ffffffffffffffff8111156119bd57600080fd5b610eba84828501611754565b6040815260006119dc60408301856116ff565b905082151560208301529392505050565b6000602082840312156119ff57600080fd5b5035919050565b60a081526000611a1960a08301886116ff565b8281036020840152611a2b81886116ff565b90508281036040840152611a3f81876116ff565b90508281036060840152611a5381866116ff565b91505082151560808301529695505050505050565b600080600060408486031215611a7d57600080fd5b611a8684611519565b9250602084013567ffffffffffffffff811115611aa257600080fd5b611aae86828701611535565b9497909650939450505050565b8183823760009101908152919050565b600181811c90821680611adf57607f821691505b602082108103611aff57634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c915080831680611b2157607f831692505b60208084108203611b4057634e487b7160e01b86526022600452602486fd5b818015611b545760018114611b6557611b92565b60ff19861689528489019650611b92565b60008a81526020902060005b86811015611b8a5781548b820152908501908301611b71565b505084890196505b509498975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611bde57611bde611bb6565b5060010190565b60008251611bf78184602087016116d3565b9190910192915050565b60008219821115611c1457611c14611bb6565b500190565b600082821015611c2b57611c2b611bb6565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212207baffad11c062118a22075a4c2be1299dcfd92a8e0a29f35d0e2a8da9056b47364736f6c634300080d0033";

    public static final String FUNC_CHECKCURRENTUSERSTATUS = "checkCurrentUserStatus";

    public static final String FUNC_CREATEADMIN = "createAdmin";

    public static final String FUNC_CREATEUSERDATA = "createUserData";

    public static final String FUNC_DATA = "data";

    public static final String FUNC_DELETEADDRESSFROMADMIN = "deleteAddressFromAdmin";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_GETADDRESSADMINARRAYLENGTH = "getAddressAdminArrayLength";

    public static final String FUNC_GETDATALISTLENGTH = "getDataListLength";

    public static final String FUNC_GETNAMEADDRESS = "getNameAddress";

    public static final String FUNC_UPDATESTATUSINFECTED = "updateStatusInfected";

    public static final String FUNC_UPDATETRANSACTIONHASH = "updateTransactionHash";

    public static final String FUNC_USERSARRAYLENGTH = "usersArrayLength";

    public static final String FUNC_VERIFYADMIN = "verifyAdmin";

    public static final String FUNC_VERIFYDEVELOPER = "verifyDeveloper";

    public static final String FUNC_VERIFYLOGINADMIN = "verifyLoginAdmin";

    public static final String FUNC_VERIFYLOGINDEVELOPER = "verifyLoginDeveloper";

    @Deprecated
    protected NewSafeBlock_sol_NewSafeBlock(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected NewSafeBlock_sol_NewSafeBlock(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected NewSafeBlock_sol_NewSafeBlock(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected NewSafeBlock_sol_NewSafeBlock(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Tuple2<String, Boolean>> checkCurrentUserStatus(String name) {
        final Function function = new Function(FUNC_CHECKCURRENTUSERSTATUS, 
                Arrays.<Type>asList(new Utf8String(name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple2<String, Boolean>>(function,
                new Callable<Tuple2<String, Boolean>>() {
                    @Override
                    public Tuple2<String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, Boolean>(
                                (String) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> createAdmin(String newAddress, String name, String password) {
        final Function function = new Function(
                FUNC_CREATEADMIN, 
                Arrays.<Type>asList(new Address(160, newAddress),
                new Utf8String(name),
                new Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createUserData(String dataUser, String key, String name) {
        final Function function = new Function(
                FUNC_CREATEUSERDATA, 
                Arrays.<Type>asList(new Utf8String(dataUser),
                new Utf8String(key),
                new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple5<String, String, String, String, Boolean>> data(BigInteger param0) {
        final Function function = new Function(FUNC_DATA, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, String, String, Boolean>>(function,
                new Callable<Tuple5<String, String, String, String, Boolean>>() {
                    @Override
                    public Tuple5<String, String, String, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> deleteAddressFromAdmin(String deleteAddress, String name) {
        final Function function = new Function(
                FUNC_DELETEADDRESSFROMADMIN, 
                Arrays.<Type>asList(new Address(160, deleteAddress),
                new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getAddress() {
        final Function function = new Function(FUNC_GETADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getAddressAdminArrayLength() {
        final Function function = new Function(FUNC_GETADDRESSADMINARRAYLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getDataListLength() {
        final Function function = new Function(FUNC_GETDATALISTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getNameAddress(String addres) {
        final Function function = new Function(FUNC_GETNAMEADDRESS, 
                Arrays.<Type>asList(new Address(160, addres)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> updateStatusInfected(String name, Boolean newStatus) {
        final Function function = new Function(
                FUNC_UPDATESTATUSINFECTED, 
                Arrays.<Type>asList(new Utf8String(name),
                new Bool(newStatus)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateTransactionHash(String transactionHash, String dataUser) {
        final Function function = new Function(
                FUNC_UPDATETRANSACTIONHASH, 
                Arrays.<Type>asList(new Utf8String(transactionHash),
                new Utf8String(dataUser)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> usersArrayLength() {
        final Function function = new Function(FUNC_USERSARRAYLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> verifyAdmin(String checkAddress, String name) {
        final Function function = new Function(FUNC_VERIFYADMIN, 
                Arrays.<Type>asList(new Address(160, checkAddress),
                new Utf8String(name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> verifyDeveloper(String checkAddress, String checkName) {
        final Function function = new Function(FUNC_VERIFYDEVELOPER, 
                Arrays.<Type>asList(new Address(160, checkAddress),
                new Utf8String(checkName)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> verifyLoginAdmin(String checkAddress, String name, String password) {
        final Function function = new Function(FUNC_VERIFYLOGINADMIN, 
                Arrays.<Type>asList(new Address(160, checkAddress),
                new Utf8String(name),
                new Utf8String(password)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> verifyLoginDeveloper(String checkAddress, String checkName, String checkPassword) {
        final Function function = new Function(FUNC_VERIFYLOGINDEVELOPER, 
                Arrays.<Type>asList(new Address(160, checkAddress),
                new Utf8String(checkName),
                new Utf8String(checkPassword)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static NewSafeBlock_sol_NewSafeBlock load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new NewSafeBlock_sol_NewSafeBlock(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static NewSafeBlock_sol_NewSafeBlock load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new NewSafeBlock_sol_NewSafeBlock(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static NewSafeBlock_sol_NewSafeBlock load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new NewSafeBlock_sol_NewSafeBlock(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static NewSafeBlock_sol_NewSafeBlock load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new NewSafeBlock_sol_NewSafeBlock(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<NewSafeBlock_sol_NewSafeBlock> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(NewSafeBlock_sol_NewSafeBlock.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<NewSafeBlock_sol_NewSafeBlock> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(NewSafeBlock_sol_NewSafeBlock.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<NewSafeBlock_sol_NewSafeBlock> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(NewSafeBlock_sol_NewSafeBlock.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<NewSafeBlock_sol_NewSafeBlock> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(NewSafeBlock_sol_NewSafeBlock.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
