package com.example.safeblock;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class SmartContractBaru_sol_SmartContractBaru extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_CHECKCURRENTUSERSTATUS = "checkCurrentUserStatus";

    public static final String FUNC_CREATEDOCTORACCOUNT = "createDoctorAccount";

    public static final String FUNC_CREATETESTCOVID = "createTestCovid";

    public static final String FUNC_CREATEUSERDATA = "createUserData";

    public static final String FUNC_DATA = "data";

    public static final String FUNC_DELETEADDRESSFROMDOCTOR = "deleteAddressFromDoctor";

    public static final String FUNC_DELETEARRAYUSER = "deleteArrayUser";

    public static final String FUNC_GETADDRESSDOCTORARRAYLENGTH = "getAddressDoctorArrayLength";

    public static final String FUNC_GETARRAYDATA = "getArrayData";

    public static final String FUNC_GETARRAYDOCTORACCOUNTADDRESS = "getArrayDoctorAccountAddress";

    public static final String FUNC_GETARRAYUSER = "getArrayUser";

    public static final String FUNC_GETDATA = "getData";

    public static final String FUNC_GETDATALISTLENGTH = "getDataListLength";

    public static final String FUNC_GETLISTTESTCOVIDBYDOCTOR = "getListTestCovidByDoctor";

    public static final String FUNC_GETLISTTESTCOVIDBYUSER = "getListTestCovidByUser";

    public static final String FUNC_GETNAMEDOCTORADDRESS = "getNameDoctorAddress";

    public static final String FUNC_LISTTESTCOVID = "listTestCovid";

    public static final String FUNC_TRANSAFERETHERADDRESS = "transaferEtherAddress";

    public static final String FUNC_UPDATETESTCOVIDRESULT = "updateTestCovidResult";

    public static final String FUNC_UPDATETRANSACTIONHASH = "updateTransactionHash";

    public static final String FUNC_VERIFYDOCTOR = "verifyDoctor";

    public static final String FUNC_VERIFYLOGINDOCTOR = "verifyLoginDoctor";

    @Deprecated
    protected SmartContractBaru_sol_SmartContractBaru(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SmartContractBaru_sol_SmartContractBaru(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SmartContractBaru_sol_SmartContractBaru(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SmartContractBaru_sol_SmartContractBaru(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Tuple2<String, Boolean>> checkCurrentUserStatus(String name) {
        final Function function = new Function(FUNC_CHECKCURRENTUSERSTATUS, 
                Arrays.<Type>asList(new Utf8String(name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple2<String, Boolean>>(function,
                new Callable<Tuple2<String, Boolean>>() {
                    @Override
                    public Tuple2<String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, Boolean>(
                                (String) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> createDoctorAccount(String newAddress, String name, String password) {
        final Function function = new Function(
                FUNC_CREATEDOCTORACCOUNT, 
                Arrays.<Type>asList(new Address(160, newAddress),
                new Utf8String(name),
                new Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createTestCovid(String testId, String patientName, String detailTest) {
        final Function function = new Function(
                FUNC_CREATETESTCOVID, 
                Arrays.<Type>asList(new Utf8String(testId),
                new Utf8String(patientName),
                new Utf8String(detailTest)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createUserData(String dataUser, String key, String name) {
        final Function function = new Function(
                FUNC_CREATEUSERDATA, 
                Arrays.<Type>asList(new Utf8String(dataUser),
                new Utf8String(key),
                new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple5<String, String, String, String, Boolean>> data(BigInteger param0) {
        final Function function = new Function(FUNC_DATA, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, String, String, Boolean>>(function,
                new Callable<Tuple5<String, String, String, String, Boolean>>() {
                    @Override
                    public Tuple5<String, String, String, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> deleteAddressFromDoctor(String deleteAddress, String name) {
        final Function function = new Function(
                FUNC_DELETEADDRESSFROMDOCTOR, 
                Arrays.<Type>asList(new Address(160, deleteAddress),
                new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteArrayUser(String nameDelete) {
        final Function function = new Function(
                FUNC_DELETEARRAYUSER, 
                Arrays.<Type>asList(new Utf8String(nameDelete)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getAddressDoctorArrayLength() {
        final Function function = new Function(FUNC_GETADDRESSDOCTORARRAYLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getArrayData() {
        final Function function = new Function(FUNC_GETARRAYDATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Data>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getArrayDoctorAccountAddress() {
        final Function function = new Function(FUNC_GETARRAYDOCTORACCOUNTADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getArrayUser() {
        final Function function = new Function(FUNC_GETARRAYUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Data> getData(BigInteger index) {
        final Function function = new Function(FUNC_GETDATA, 
                Arrays.<Type>asList(new Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Data>() {}));
        return executeRemoteCallSingleValueReturn(function, Data.class);
    }

    public RemoteFunctionCall<BigInteger> getDataListLength() {
        final Function function = new Function(FUNC_GETDATALISTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getListTestCovidByDoctor() {
        final Function function = new Function(FUNC_GETLISTTESTCOVIDBYDOCTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<TestCovid>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getListTestCovidByUser(String name) {
        final Function function = new Function(FUNC_GETLISTTESTCOVIDBYUSER, 
                Arrays.<Type>asList(new Utf8String(name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<TestCovid>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> getNameDoctorAddress(String addres) {
        final Function function = new Function(FUNC_GETNAMEDOCTORADDRESS, 
                Arrays.<Type>asList(new Address(160, addres)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple5<String, String, String, String, Boolean>> listTestCovid(BigInteger param0) {
        final Function function = new Function(FUNC_LISTTESTCOVID, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, String, String, Boolean>>(function,
                new Callable<Tuple5<String, String, String, String, Boolean>>() {
                    @Override
                    public Tuple5<String, String, String, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> transaferEtherAddress(String specificAddresss, String doctorName, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSAFERETHERADDRESS, 
                Arrays.<Type>asList(new Address(160, specificAddresss),
                new Utf8String(doctorName),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function,amount);
    }

    public RemoteFunctionCall<TransactionReceipt> updateTestCovidResult(String testId, String stateTest, Boolean resultTest) {
        final Function function = new Function(
                FUNC_UPDATETESTCOVIDRESULT, 
                Arrays.<Type>asList(new Utf8String(testId),
                new Utf8String(stateTest),
                new Bool(resultTest)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateTransactionHash(String transactionHash, String dataUser) {
        final Function function = new Function(
                FUNC_UPDATETRANSACTIONHASH, 
                Arrays.<Type>asList(new Utf8String(transactionHash),
                new Utf8String(dataUser)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> verifyDoctor(String checkAddress, String name) {
        final Function function = new Function(FUNC_VERIFYDOCTOR, 
                Arrays.<Type>asList(new Address(160, checkAddress),
                new Utf8String(name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> verifyLoginDoctor(String checkAddress, String name, String password) {
        final Function function = new Function(FUNC_VERIFYLOGINDOCTOR, 
                Arrays.<Type>asList(new Address(160, checkAddress),
                new Utf8String(name),
                new Utf8String(password)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static SmartContractBaru_sol_SmartContractBaru load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SmartContractBaru_sol_SmartContractBaru(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SmartContractBaru_sol_SmartContractBaru load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SmartContractBaru_sol_SmartContractBaru(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SmartContractBaru_sol_SmartContractBaru load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SmartContractBaru_sol_SmartContractBaru(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SmartContractBaru_sol_SmartContractBaru load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SmartContractBaru_sol_SmartContractBaru(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SmartContractBaru_sol_SmartContractBaru> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SmartContractBaru_sol_SmartContractBaru.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SmartContractBaru_sol_SmartContractBaru> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SmartContractBaru_sol_SmartContractBaru.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<SmartContractBaru_sol_SmartContractBaru> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SmartContractBaru_sol_SmartContractBaru.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SmartContractBaru_sol_SmartContractBaru> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SmartContractBaru_sol_SmartContractBaru.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Data extends DynamicStruct {
        public String transactionHash;

        public String data;

        public String key;

        public String name;

        public Boolean status;

        public Data(String transactionHash, String data, String key, String name, Boolean status) {
            super(new Utf8String(transactionHash),new Utf8String(data),new Utf8String(key),new Utf8String(name),new Bool(status));
            this.transactionHash = transactionHash;
            this.data = data;
            this.key = key;
            this.name = name;
            this.status = status;
        }

        public Data(Utf8String transactionHash, Utf8String data, Utf8String key, Utf8String name, Bool status) {
            super(transactionHash,data,key,name,status);
            this.transactionHash = transactionHash.getValue();
            this.data = data.getValue();
            this.key = key.getValue();
            this.name = name.getValue();
            this.status = status.getValue();
        }
    }
}
